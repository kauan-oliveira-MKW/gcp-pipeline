name: Build & Deploy Flex Template Image

on: workflow_dispatch # to be triggered manually

# on:
#   push:
#     branches:
#       - master
#     paths:
#       - 01-flex-template/infra/**
#       - 01-flex-template/docker/**
#       - 01-flex-template/src/**

jobs:
  build-deploy-flex-template:
    name: Build & Deploy Flex Template
    runs-on: ubuntu-latest
    #defaults:
      #run:
       # working-directory: 01-flex-template

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # authenticate with gcloud
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.SA_EMAIL }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: 01-flex-template/infra

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan
        working-directory: 01-flex-template/infra
        env:
          TF_VAR_gcp_auth_token: ${{ steps.auth.outputs.access_token }}

      - name: Check directory structure
        run: |
          ls -la
          ls -la ../src
          ls -la ../docker
        working-directory: 01-flex-template/infra
      
      # Garante que o api artifact está habilitado
      - name: Enable Artifact Registry API
        run: |-
          gcloud services enable artifactregistry.googleapis.com --project=${{ secrets.PROJECT_ID }}
        env:
          CLOUDSDK_AUTH_ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}

      # Verifica e cria repositório
      - name: Setup Artifact Registry Repository
        run: |
          if ! gcloud artifacts repositories list --location=us-central1 --filter="name~'dataflow-templates'" --format="value(name)" | grep -q "dataflow-templates"; then
            gcloud artifacts repositories create dataflow-templates \
              --repository-format=docker \
              --location=us-central1 \
              --description="Dataflow templates repository"
          fi
        env:
          CLOUDSDK_AUTH_ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}

      - name: Authenticate Docker to GCP
        run: |
          echo "${{ steps.auth.outputs.access_token }}" | docker login -u oauth2accesstoken --password-stdin https://us-central1-docker.pkg.dev
      
      # Builds or changes infrastructure
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: 01-flex-template/infra
        env:
          TF_VAR_gcp_auth_token: ${{ steps.auth.outputs.access_token }}
